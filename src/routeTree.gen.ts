/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as RedirectRouteImport } from './routes/redirect'
import { Route as LabRouteImport } from './routes/lab'
import { Route as DeferredRouteImport } from './routes/deferred'
import { Route as PathlessLayoutRouteImport } from './routes/_pathlessLayout'
import { Route as IndexRouteImport } from './routes/index'
import { ServerRoute as HealthzServerRouteImport } from './routes/healthz'
import { ServerRoute as ApiHelloServerRouteImport } from './routes/api.hello'
import { ServerRoute as ApiCvParseServerRouteImport } from './routes/api.cv.parse'

const rootServerRouteImport = createServerRootRoute()

const RedirectRoute = RedirectRouteImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const LabRoute = LabRouteImport.update({
  id: '/lab',
  path: '/lab',
  getParentRoute: () => rootRouteImport,
} as any)
const DeferredRoute = DeferredRouteImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutRoute = PathlessLayoutRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HealthzServerRoute = HealthzServerRouteImport.update({
  id: '/healthz',
  path: '/healthz',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiHelloServerRoute = ApiHelloServerRouteImport.update({
  id: '/api/hello',
  path: '/api/hello',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiCvParseServerRoute = ApiCvParseServerRouteImport.update({
  id: '/api/cv/parse',
  path: '/api/cv/parse',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/lab': typeof LabRoute
  '/redirect': typeof RedirectRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/lab': typeof LabRoute
  '/redirect': typeof RedirectRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_pathlessLayout': typeof PathlessLayoutRoute
  '/deferred': typeof DeferredRoute
  '/lab': typeof LabRoute
  '/redirect': typeof RedirectRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/deferred' | '/lab' | '/redirect'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/deferred' | '/lab' | '/redirect'
  id: '__root__' | '/' | '/_pathlessLayout' | '/deferred' | '/lab' | '/redirect'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PathlessLayoutRoute: typeof PathlessLayoutRoute
  DeferredRoute: typeof DeferredRoute
  LabRoute: typeof LabRoute
  RedirectRoute: typeof RedirectRoute
}
export interface FileServerRoutesByFullPath {
  '/healthz': typeof HealthzServerRoute
  '/api/hello': typeof ApiHelloServerRoute
  '/api/cv/parse': typeof ApiCvParseServerRoute
}
export interface FileServerRoutesByTo {
  '/healthz': typeof HealthzServerRoute
  '/api/hello': typeof ApiHelloServerRoute
  '/api/cv/parse': typeof ApiCvParseServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/healthz': typeof HealthzServerRoute
  '/api/hello': typeof ApiHelloServerRoute
  '/api/cv/parse': typeof ApiCvParseServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/healthz' | '/api/hello' | '/api/cv/parse'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/healthz' | '/api/hello' | '/api/cv/parse'
  id: '__root__' | '/healthz' | '/api/hello' | '/api/cv/parse'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  HealthzServerRoute: typeof HealthzServerRoute
  ApiHelloServerRoute: typeof ApiHelloServerRoute
  ApiCvParseServerRoute: typeof ApiCvParseServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/lab': {
      id: '/lab'
      path: '/lab'
      fullPath: '/lab'
      preLoaderRoute: typeof LabRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/healthz': {
      id: '/healthz'
      path: '/healthz'
      fullPath: '/healthz'
      preLoaderRoute: typeof HealthzServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/hello': {
      id: '/api/hello'
      path: '/api/hello'
      fullPath: '/api/hello'
      preLoaderRoute: typeof ApiHelloServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/cv/parse': {
      id: '/api/cv/parse'
      path: '/api/cv/parse'
      fullPath: '/api/cv/parse'
      preLoaderRoute: typeof ApiCvParseServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PathlessLayoutRoute: PathlessLayoutRoute,
  DeferredRoute: DeferredRoute,
  LabRoute: LabRoute,
  RedirectRoute: RedirectRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  HealthzServerRoute: HealthzServerRoute,
  ApiHelloServerRoute: ApiHelloServerRoute,
  ApiCvParseServerRoute: ApiCvParseServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
